/**
    @mainpage
    @author WrinklyNinja
    @version 6.0.3
    @copyright libloadorder is distributed under the GNU General Public License v3.0. For the full text of the license, see the LICENSE file included in the source archive.

    @section intro_sec Introduction

    libloadorder is a free software library that provides functions for manipulating plugin load order and active status. Its features are:
      - C frontend.
      - Can be built as x86 and x64 static and dynamic libraries.
      - Supports TES III: Morrowind, TES IV: Oblivion, TES V: Skyrim, Fallout 3, Fallout: New Vegas and Fallout 4.
      - Provides a uniform interface to the supported games' differing load order systems.
      - Supports the community standard textfile-based load order system for TES V: Skyrim and Fallout 4.
      - Supports ghosted plugins.
      - Get/Set the active plugin list.
      - Get/Set the full load order.
      - Get/Set the load order position of an individual plugin.
      - Get/Set the active status of an individual plugin.
      - Uses load order and active plugin list caching to avoid unnecessary disk reads, increasing performance.
      - Free and open source software licensed under the GNU General Public License v3.0.

    libloadorder is designed to free modding utility developers from the task of implementing and maintaining their own code for the functionality it provides.

    This documentation assumes a familiarity with the basics of load ordering. An introduction to the concepts involved may be found in @ref tlos_page.

    @note libloadorder is *not* thread safe. Thread safety is a goal, but one that has not yet been achieved. Bear this in mind if using it in a multi-threaded client.

    @section var_sec Variable Types

    libloadorder uses character strings and integers for information input/output.
      - All strings are null-terminated byte character strings encoded in UTF-8.
      - All return, game and load order method codes are unsigned integers at least 16 bits in size.
      - All array sizes are unsigned integers at least 16 bits in size.
      - File paths are case-sensitive if and only if the underlying file system is case-sensitive.

    @section memory_sec Memory Management

    libloadorder manages the memory of strings and arrays it returns internally, so such strings and arrays should not be deallocated by the client.

    Data returned by a function lasts until a function is called which returns data of the same type (eg. a string is stored until the client calls another function which returns a string, an integer array lasts until another integer array is returned, etc.).

    All allocated memory is freed when lo_destroy_handle() is called, except the string allocated by lo_get_error_message(), which must be freed by calling lo_cleanup().

    @section valid_plugins_sec Plugin Validity

    Where libloadorder functions take one or more plugin filenames, it checks that these filenames correspond to valid plugins. libloadorder defines a valid plugin as one that:

    - Ends with ".esp", ".esm", ".esp.ghost" or ".esm.ghost".
    - Contains a header record with:
      - The correct type ("TES3" for Morrowind, "TES4" otherwise).
      - A size that is not larger than the total file size.
      - Subrecords with sizes that do not together sum to larger than the expected total subrecords size.

    This definition is substantially more permissive than games or other utilities may be for performance reasons, and because libloadorder uses no plugin data beyond the header record, so later corruption or invalid data would not affect its behaviour.

    This permissivity does allow more strictly invalid plugins to be positioned in the load order and activated, which may cause game issues, but protecting against such circumstances is beyond the scope of libloadorder.

    @section caching_sec Data Caching

    libloadorder caches plugin, load order and active status data to improve performance. Each game handle has its own unique cache, and change detection is performed whenever an API function that takes a game handle is called. If changes are detected, the necessary data are reloaded before the function operates on the data.

    Change detection is carried out by timestamp comparison, checking the current timestamps against the timestamps for the cached data. The files and folders which libloadorder checks the timestamps of are:

    - The folder into which plugins are installed.
    - The installed plugins.
    - The file that holds the active plugins data.
    - The file that holds the load order data, if the game is one handled by the textfile-based load order system.

    Edits made to a file will only be detected if they call that file's timestamp to change. If edits are made and the timestamp is unchanged, the changes can only be detected by destroying the existing game handle and creating a new game handle to use.

    @section credit_sec Credits

    libloadorder is written by WrinklyNinja, with code contribution from Leandro Conde. libloadorder is written in C/C++ and makes use of some of the <a href="http://www.boost.org/">Boost</a> libraries and the <a href="https://github.com/WrinklyNinja/libespm">libespm</a> and <a href="https://github.com/google/googletest">Google Test</a> libraries.
*/
